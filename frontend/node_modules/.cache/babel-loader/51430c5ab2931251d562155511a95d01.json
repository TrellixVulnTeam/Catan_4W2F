{"ast":null,"code":"// Maps (level, index) coordinate system to actual board coordinates\nimport V from \"./Vector\";\nexport default function getVertex(level, index, unit) {\n  // Given a unit (equivalent to hexagon radius in displayed svg)\n  // calculates the svg coordinate based on the (level, index) coordinate system\n  const hexCount = 6 + level * 12;\n  if (index < 0 || hexCount < index) throw Error(\"Invalid index=\".concat(index, \" for level=\").concat(level));\n\n  const P = (x, y) => new V(x, y);\n\n  const wunit = Math.sqrt(3) / 2 * unit;\n  let axis;\n\n  if (level === 0) {\n    axis = P(0, -unit);\n  } else if (level === 1) {\n    const imod3 = index % 3;\n    if (imod3 === 0) axis = P(0, 2 * -unit);else if (imod3 === 1) axis = V.rot(P(wunit, 2.5 * -unit), -20);else if (imod3 === 2) axis = V.rot(P(2 * wunit, 2 * -unit), -2 * 20);\n  } else if (level === 2) {\n    const imod5 = index % 5;\n    if (imod5 === 0) axis = P(0, 4 * -unit);else if (imod5 === 1) axis = V.rot(P(wunit, 3.5 * -unit), -12);else if (imod5 === 2) axis = V.rot(P(2 * wunit, 4 * -unit), -2 * 12);else if (imod5 === 3) axis = V.rot(P(3 * wunit, 3.5 * -unit), -3 * 12);else if (imod5 === 4) axis = V.rot(P(3 * wunit, 2.5 * -unit), -4 * 12);\n  } else {\n    throw new Error(\"Invalid vertex level\");\n  }\n\n  const vertex = V.rot(axis, 360 / hexCount * index);\n  return vertex;\n}","map":{"version":3,"sources":["/home/agustina/Descargas/catan/src/Vertex.jsx"],"names":["V","getVertex","level","index","unit","hexCount","Error","P","x","y","wunit","Math","sqrt","axis","imod3","rot","imod5","vertex"],"mappings":"AAAA;AAEA,OAAOA,CAAP,MAAc,UAAd;AAEA,eAAe,SAASC,SAAT,CAAmBC,KAAnB,EAA0BC,KAA1B,EAAiCC,IAAjC,EAAuC;AACpD;AACA;AACA,QAAMC,QAAQ,GAAG,IAAIH,KAAK,GAAG,EAA7B;AACA,MAAIC,KAAK,GAAG,CAAR,IAAaE,QAAQ,GAAGF,KAA5B,EACE,MAAMG,KAAK,yBAAkBH,KAAlB,wBAAqCD,KAArC,EAAX;;AAEF,QAAMK,CAAC,GAAG,CAACC,CAAD,EAAIC,CAAJ,KAAU,IAAIT,CAAJ,CAAMQ,CAAN,EAASC,CAAT,CAApB;;AACA,QAAMC,KAAK,GAAIC,IAAI,CAACC,IAAL,CAAU,CAAV,IAAe,CAAhB,GAAqBR,IAAnC;AAEA,MAAIS,IAAJ;;AACA,MAAIX,KAAK,KAAK,CAAd,EAAiB;AACfW,IAAAA,IAAI,GAAGN,CAAC,CAAC,CAAD,EAAI,CAACH,IAAL,CAAR;AACD,GAFD,MAEO,IAAIF,KAAK,KAAK,CAAd,EAAiB;AACtB,UAAMY,KAAK,GAAGX,KAAK,GAAG,CAAtB;AACA,QAAIW,KAAK,KAAK,CAAd,EAAiBD,IAAI,GAAGN,CAAC,CAAC,CAAD,EAAI,IAAI,CAACH,IAAT,CAAR,CAAjB,KACK,IAAIU,KAAK,KAAK,CAAd,EAAiBD,IAAI,GAAGb,CAAC,CAACe,GAAF,CAAMR,CAAC,CAACG,KAAD,EAAQ,MAAM,CAACN,IAAf,CAAP,EAA6B,CAAC,EAA9B,CAAP,CAAjB,KACA,IAAIU,KAAK,KAAK,CAAd,EAAiBD,IAAI,GAAGb,CAAC,CAACe,GAAF,CAAMR,CAAC,CAAC,IAAIG,KAAL,EAAY,IAAI,CAACN,IAAjB,CAAP,EAA+B,CAAC,CAAD,GAAK,EAApC,CAAP;AACvB,GALM,MAKA,IAAIF,KAAK,KAAK,CAAd,EAAiB;AACtB,UAAMc,KAAK,GAAGb,KAAK,GAAG,CAAtB;AACA,QAAIa,KAAK,KAAK,CAAd,EAAiBH,IAAI,GAAGN,CAAC,CAAC,CAAD,EAAI,IAAI,CAACH,IAAT,CAAR,CAAjB,KACK,IAAIY,KAAK,KAAK,CAAd,EAAiBH,IAAI,GAAGb,CAAC,CAACe,GAAF,CAAMR,CAAC,CAACG,KAAD,EAAQ,MAAM,CAACN,IAAf,CAAP,EAA6B,CAAC,EAA9B,CAAP,CAAjB,KACA,IAAIY,KAAK,KAAK,CAAd,EAAiBH,IAAI,GAAGb,CAAC,CAACe,GAAF,CAAMR,CAAC,CAAC,IAAIG,KAAL,EAAY,IAAI,CAACN,IAAjB,CAAP,EAA+B,CAAC,CAAD,GAAK,EAApC,CAAP,CAAjB,KACA,IAAIY,KAAK,KAAK,CAAd,EAAiBH,IAAI,GAAGb,CAAC,CAACe,GAAF,CAAMR,CAAC,CAAC,IAAIG,KAAL,EAAY,MAAM,CAACN,IAAnB,CAAP,EAAiC,CAAC,CAAD,GAAK,EAAtC,CAAP,CAAjB,KACA,IAAIY,KAAK,KAAK,CAAd,EAAiBH,IAAI,GAAGb,CAAC,CAACe,GAAF,CAAMR,CAAC,CAAC,IAAIG,KAAL,EAAY,MAAM,CAACN,IAAnB,CAAP,EAAiC,CAAC,CAAD,GAAK,EAAtC,CAAP;AACvB,GAPM,MAOA;AACL,UAAM,IAAIE,KAAJ,CAAU,sBAAV,CAAN;AACD;;AAED,QAAMW,MAAM,GAAGjB,CAAC,CAACe,GAAF,CAAMF,IAAN,EAAa,MAAMR,QAAP,GAAmBF,KAA/B,CAAf;AACA,SAAOc,MAAP;AACD","sourcesContent":["// Maps (level, index) coordinate system to actual board coordinates\n\nimport V from \"./Vector\";\n\nexport default function getVertex(level, index, unit) {\n  // Given a unit (equivalent to hexagon radius in displayed svg)\n  // calculates the svg coordinate based on the (level, index) coordinate system\n  const hexCount = 6 + level * 12;\n  if (index < 0 || hexCount < index)\n    throw Error(`Invalid index=${index} for level=${level}`);\n\n  const P = (x, y) => new V(x, y);\n  const wunit = (Math.sqrt(3) / 2) * unit;\n\n  let axis;\n  if (level === 0) {\n    axis = P(0, -unit);\n  } else if (level === 1) {\n    const imod3 = index % 3;\n    if (imod3 === 0) axis = P(0, 2 * -unit);\n    else if (imod3 === 1) axis = V.rot(P(wunit, 2.5 * -unit), -20);\n    else if (imod3 === 2) axis = V.rot(P(2 * wunit, 2 * -unit), -2 * 20);\n  } else if (level === 2) {\n    const imod5 = index % 5;\n    if (imod5 === 0) axis = P(0, 4 * -unit);\n    else if (imod5 === 1) axis = V.rot(P(wunit, 3.5 * -unit), -12);\n    else if (imod5 === 2) axis = V.rot(P(2 * wunit, 4 * -unit), -2 * 12);\n    else if (imod5 === 3) axis = V.rot(P(3 * wunit, 3.5 * -unit), -3 * 12);\n    else if (imod5 === 4) axis = V.rot(P(3 * wunit, 2.5 * -unit), -4 * 12);\n  } else {\n    throw new Error(\"Invalid vertex level\");\n  }\n\n  const vertex = V.rot(axis, (360 / hexCount) * index);\n  return vertex;\n}\n"]},"metadata":{},"sourceType":"module"}