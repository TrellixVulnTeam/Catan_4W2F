{"ast":null,"code":"import _defineProperty from \"/home/agustina/Descargas/catan/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/agustina/Descargas/catan/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/agustina/Descargas/catan/src/components/Board.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport _ from \"lodash\";\nimport PropTypes from \"prop-types\";\nimport api from \"../Api\";\nimport GameContext, { PLAY_KNIGHT, PLAY_ROAD_BUILDING } from \"../GameContext\";\nimport CatanTypes from \"../CatanTypes\";\nimport Hexagon from \"./Hexagon\";\nimport Settlement, { BuildIndicator } from \"./Settlement\";\nimport Road, { BuildRoadIndicator } from \"./Road\";\nexport default function Board() {\n  const _useContext = useContext(GameContext),\n        phase = _useContext.phase,\n        gameId = _useContext.gameId;\n\n  const _useState = useState({\n    hexagons: null,\n    settlements: null,\n    roads: null,\n    availableBuilds: null,\n    availableUpgrades: null,\n    availableRoadSlots: null,\n    robber: null\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        _useState2$ = _useState2[0],\n        hexagons = _useState2$.hexagons,\n        settlements = _useState2$.settlements,\n        roads = _useState2$.roads,\n        availableBuilds = _useState2$.availableBuilds,\n        availableUpgrades = _useState2$.availableUpgrades,\n        availableRoadSlots = _useState2$.availableRoadSlots,\n        robber = _useState2$.robber,\n        setState = _useState2[1];\n\n  useEffect(() => {\n    const fetchBoard = async () => {\n      // Parallel fetching\n      const _ref = await Promise.all([api.games.board(gameId), api.games.get(gameId), api.games.actions(gameId)]),\n            _ref2 = _slicedToArray(_ref, 3),\n            board = _ref2[0].data,\n            _ref2$1$data = _ref2[1].data,\n            players = _ref2$1$data.players,\n            robberPosition = _ref2$1$data.robber,\n            actions = _ref2[2].data; // Prepare fetched settlements for re-rendering by\n      // combining all vertices from all players in the same array\n\n\n      const combinedSettlements = _.flatten( // Get built vertices from players\n      players.map(p => // Concat those vertices\n      _.concat( // Settlements to usable vertex\n      p.settlements.map(s => ({\n        position: s,\n        isCity: false,\n        colour: p.colour,\n        username: p.username\n      })), // Cities to usable vertex\n      p.cities.map(c => ({\n        position: c,\n        isCity: true,\n        colour: p.colour,\n        username: p.username\n      }))))); // Combine all roads from all players in the same array\n\n\n      const builtRoads = _.flatten( // Get built roads from players\n      players.map(p => // Expand roads with more information like username and colour\n      p.roads.map(r => ({\n        vertices: r,\n        colour: p.colour,\n        username: p.username\n      })))); // Returns empty list if action not available, else action-of-type payload\n\n\n      const getPayload = type => (actions.find(a => a.type === type) || {\n        payload: []\n      }).payload; // Available places to move the robber changes if playing knight card\n\n\n      const availableRobberMoves = [PLAY_KNIGHT].includes(phase) ? getPayload(\"play_knight_card\") : getPayload(\"move_robber\"); // If none then []\n      // Combine board.hexes with information related to the robber\n\n      const robberInfoForHex = hex => {\n        const move = availableRobberMoves.find(a => _.isEqual(a.position, hex.position));\n        return {\n          hasRobber: _.isEqual(hex.position, robberPosition),\n          availableRobberMove: Boolean(move),\n          adjacentPlayersToRob: move ? move.players : []\n        };\n      };\n\n      const combinedHexagons = board.hexes.map(h => _objectSpread({}, h, {}, robberInfoForHex(h))); // Available roads changes if playing road_building card\n\n      const aRoadSlots = [PLAY_ROAD_BUILDING].includes(phase) ? getPayload(\"play_road_building_card\") : getPayload(\"build_road\"); // Available builds and upgrades\n\n      const aBuilds = getPayload(\"build_settlement\");\n      const aUpgrades = getPayload(\"upgrade_city\"); // Update board internal state\n\n      setState({\n        hexagons: combinedHexagons,\n        settlements: combinedSettlements,\n        roads: builtRoads,\n        availableBuilds: aBuilds,\n        availableUpgrades: aUpgrades,\n        availableRoadSlots: aRoadSlots,\n        robber: robberPosition\n      });\n    };\n\n    fetchBoard();\n    const interval = setInterval(() => fetchBoard(), api.POLL_EVERY);\n    return () => clearInterval(interval);\n  }, [phase, gameId]); // !hexagons is a weird way of saying nothing has loaded yet\n\n  if (!hexagons) return React.createElement(\"i\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, \"Loading Board...\");\n  return React.createElement(BoardContainer, {\n    hexagons: hexagons,\n    settlements: settlements,\n    roads: roads,\n    availableBuilds: availableBuilds,\n    availableUpgrades: availableUpgrades,\n    availableRoadSlots: availableRoadSlots,\n    robber: robber,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  });\n}\n\nfunction BoardContainer({\n  hexagons,\n  settlements,\n  roads,\n  availableBuilds,\n  availableUpgrades,\n  availableRoadSlots,\n  robber\n}) {\n  const unit = 256; // Radius of one hexagon in pixels\n\n  const width = 2560;\n  const height = 2560;\n  const viewBox = \"\".concat(-width / 2, \" \").concat(-height / 2, \" \").concat(width, \" \").concat(height);\n  const playerColours = {\n    red: \"#F44336\",\n    blue: \"#2196F3\",\n    yellow: \"#FFC107\",\n    white: \"#4CAF50\"\n  };\n  return React.createElement(\"div\", {\n    className: \"board\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, React.createElement(\"svg\", {\n    viewBox: viewBox,\n    overflow: \"visible\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }, hexagons.map(hex => React.createElement(Hexagon, {\n    key: Object.values(hex.position),\n    position: hex.position,\n    terrain: hex.terrain,\n    token: hex.token,\n    unit: unit,\n    hasRobber: hex.hasRobber,\n    availableRobberMove: hex.availableRobberMove,\n    adjacentPlayersToRob: hex.adjacentPlayersToRob,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  })), availableRoadSlots.map(road => React.createElement(BuildRoadIndicator, {\n    key: JSON.stringify(road),\n    vertices: road,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  })), roads.map(road => React.createElement(Road // TODO: Use better keys on maps\n  , {\n    key: JSON.stringify(road.vertices),\n    vertices: road.vertices,\n    colour: playerColours[road.colour],\n    username: road.username,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  })), settlements.map(sett => React.createElement(Settlement, {\n    key: Object.values(sett.position),\n    position: sett.position,\n    isCity: sett.isCity,\n    colour: playerColours[sett.colour],\n    username: sett.username,\n    canUpgrade: _.some(availableUpgrades, sett.position),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204\n    },\n    __self: this\n  })), availableBuilds.map(vert => React.createElement(BuildIndicator, {\n    key: Object.values(vert),\n    position: vert,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214\n    },\n    __self: this\n  }))));\n}\n\nBoardContainer.propTypes = {\n  hexagons: PropTypes.arrayOf(CatanTypes.Hex),\n  settlements: PropTypes.arrayOf(PropTypes.shape({\n    position: CatanTypes.VertexPosition.isRequired,\n    isCity: PropTypes.bool.isRequired,\n    colour: PropTypes.string.isRequired,\n    username: PropTypes.string.isRequired\n  })),\n  roads: PropTypes.arrayOf(PropTypes.shape({\n    vertices: CatanTypes.RoadPosition.isRequired,\n    colour: PropTypes.string.isRequired,\n    username: PropTypes.string.isRequired\n  })),\n  availableBuilds: PropTypes.arrayOf(CatanTypes.VertexPosition),\n  availableUpgrades: PropTypes.arrayOf(CatanTypes.VertexPosition),\n  availableRoadSlots: PropTypes.arrayOf(CatanTypes.RoadPosition),\n  robber: CatanTypes.HexPosition.isRequired\n};\nBoardContainer.defaultProps = {\n  hexagons: null,\n  settlements: null,\n  roads: null,\n  availableBuilds: null,\n  availableUpgrades: null,\n  availableRoadSlots: null\n};","map":{"version":3,"sources":["/home/agustina/Descargas/catan/src/components/Board.jsx"],"names":["React","useState","useEffect","useContext","_","PropTypes","api","GameContext","PLAY_KNIGHT","PLAY_ROAD_BUILDING","CatanTypes","Hexagon","Settlement","BuildIndicator","Road","BuildRoadIndicator","Board","phase","gameId","hexagons","settlements","roads","availableBuilds","availableUpgrades","availableRoadSlots","robber","setState","fetchBoard","Promise","all","games","board","get","actions","data","players","robberPosition","combinedSettlements","flatten","map","p","concat","s","position","isCity","colour","username","cities","c","builtRoads","r","vertices","getPayload","type","find","a","payload","availableRobberMoves","includes","robberInfoForHex","hex","move","isEqual","hasRobber","availableRobberMove","Boolean","adjacentPlayersToRob","combinedHexagons","hexes","h","aRoadSlots","aBuilds","aUpgrades","interval","setInterval","POLL_EVERY","clearInterval","BoardContainer","unit","width","height","viewBox","playerColours","red","blue","yellow","white","Object","values","terrain","token","road","JSON","stringify","sett","some","vert","propTypes","arrayOf","Hex","shape","VertexPosition","isRequired","bool","string","RoadPosition","HexPosition","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport _ from \"lodash\";\nimport PropTypes from \"prop-types\";\n\nimport api from \"../Api\";\nimport GameContext, { PLAY_KNIGHT, PLAY_ROAD_BUILDING } from \"../GameContext\";\nimport CatanTypes from \"../CatanTypes\";\nimport Hexagon from \"./Hexagon\";\nimport Settlement, { BuildIndicator } from \"./Settlement\";\nimport Road, { BuildRoadIndicator } from \"./Road\";\n\nexport default function Board() {\n  const { phase, gameId } = useContext(GameContext);\n  const [\n    {\n      hexagons,\n      settlements,\n      roads,\n      availableBuilds,\n      availableUpgrades,\n      availableRoadSlots,\n      robber\n    },\n    setState\n  ] = useState({\n    hexagons: null,\n    settlements: null,\n    roads: null,\n    availableBuilds: null,\n    availableUpgrades: null,\n    availableRoadSlots: null,\n    robber: null\n  });\n\n  useEffect(() => {\n    const fetchBoard = async () => {\n      // Parallel fetching\n      const [\n        { data: board },\n        {\n          data: { players, robber: robberPosition }\n        },\n        { data: actions }\n      ] = await Promise.all([\n        api.games.board(gameId),\n        api.games.get(gameId),\n        api.games.actions(gameId)\n      ]);\n\n      // Prepare fetched settlements for re-rendering by\n      // combining all vertices from all players in the same array\n      const combinedSettlements = _.flatten(\n        // Get built vertices from players\n        players.map(p =>\n          // Concat those vertices\n          _.concat(\n            // Settlements to usable vertex\n            p.settlements.map(s => ({\n              position: s,\n              isCity: false,\n              colour: p.colour,\n              username: p.username\n            })),\n            // Cities to usable vertex\n            p.cities.map(c => ({\n              position: c,\n              isCity: true,\n              colour: p.colour,\n              username: p.username\n            }))\n          )\n        )\n      );\n\n      // Combine all roads from all players in the same array\n      const builtRoads = _.flatten(\n        // Get built roads from players\n        players.map(p =>\n          // Expand roads with more information like username and colour\n          p.roads.map(r => ({\n            vertices: r,\n            colour: p.colour,\n            username: p.username\n          }))\n        )\n      );\n\n      // Returns empty list if action not available, else action-of-type payload\n      const getPayload = type =>\n        (actions.find(a => a.type === type) || { payload: [] }).payload;\n\n      // Available places to move the robber changes if playing knight card\n      const availableRobberMoves = [PLAY_KNIGHT].includes(phase)\n        ? getPayload(\"play_knight_card\")\n        : getPayload(\"move_robber\"); // If none then []\n\n      // Combine board.hexes with information related to the robber\n      const robberInfoForHex = hex => {\n        const move = availableRobberMoves.find(a =>\n          _.isEqual(a.position, hex.position)\n        );\n        return {\n          hasRobber: _.isEqual(hex.position, robberPosition),\n          availableRobberMove: Boolean(move),\n          adjacentPlayersToRob: move ? move.players : []\n        };\n      };\n      const combinedHexagons = board.hexes.map(h => ({\n        ...h,\n        ...robberInfoForHex(h)\n      }));\n\n      // Available roads changes if playing road_building card\n      const aRoadSlots = [PLAY_ROAD_BUILDING].includes(phase)\n        ? getPayload(\"play_road_building_card\")\n        : getPayload(\"build_road\");\n\n      // Available builds and upgrades\n      const aBuilds = getPayload(\"build_settlement\");\n      const aUpgrades = getPayload(\"upgrade_city\");\n\n      // Update board internal state\n      setState({\n        hexagons: combinedHexagons,\n        settlements: combinedSettlements,\n        roads: builtRoads,\n        availableBuilds: aBuilds,\n        availableUpgrades: aUpgrades,\n        availableRoadSlots: aRoadSlots,\n        robber: robberPosition\n      });\n    };\n    fetchBoard();\n    const interval = setInterval(() => fetchBoard(), api.POLL_EVERY);\n    return () => clearInterval(interval);\n  }, [phase, gameId]);\n\n  // !hexagons is a weird way of saying nothing has loaded yet\n  if (!hexagons) return <i>Loading Board...</i>;\n  return (\n    <BoardContainer\n      hexagons={hexagons}\n      settlements={settlements}\n      roads={roads}\n      availableBuilds={availableBuilds}\n      availableUpgrades={availableUpgrades}\n      availableRoadSlots={availableRoadSlots}\n      robber={robber}\n    />\n  );\n}\n\nfunction BoardContainer({\n  hexagons,\n  settlements,\n  roads,\n  availableBuilds,\n  availableUpgrades,\n  availableRoadSlots,\n  robber\n}) {\n  const unit = 256; // Radius of one hexagon in pixels\n  const width = 2560;\n  const height = 2560;\n  const viewBox = `${-width / 2} ${-height / 2} ${width} ${height}`;\n  const playerColours = {\n    red: \"#F44336\",\n    blue: \"#2196F3\",\n    yellow: \"#FFC107\",\n    white: \"#4CAF50\"\n  };\n  return (\n    <div className=\"board\">\n      <svg\n        viewBox={viewBox}\n        overflow=\"visible\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        {hexagons.map(hex => (\n          <Hexagon\n            key={Object.values(hex.position)}\n            position={hex.position}\n            terrain={hex.terrain}\n            token={hex.token}\n            unit={unit}\n            hasRobber={hex.hasRobber}\n            availableRobberMove={hex.availableRobberMove}\n            adjacentPlayersToRob={hex.adjacentPlayersToRob}\n          />\n        ))}\n        {availableRoadSlots.map(road => (\n          <BuildRoadIndicator key={JSON.stringify(road)} vertices={road} />\n        ))}\n        {roads.map(road => (\n          <Road\n            // TODO: Use better keys on maps\n            key={JSON.stringify(road.vertices)}\n            vertices={road.vertices}\n            colour={playerColours[road.colour]}\n            username={road.username}\n          />\n        ))}\n        {settlements.map(sett => (\n          <Settlement\n            key={Object.values(sett.position)}\n            position={sett.position}\n            isCity={sett.isCity}\n            colour={playerColours[sett.colour]}\n            username={sett.username}\n            canUpgrade={_.some(availableUpgrades, sett.position)}\n          />\n        ))}\n        {availableBuilds.map(vert => (\n          <BuildIndicator key={Object.values(vert)} position={vert} />\n        ))}\n      </svg>\n    </div>\n  );\n}\n\nBoardContainer.propTypes = {\n  hexagons: PropTypes.arrayOf(CatanTypes.Hex),\n  settlements: PropTypes.arrayOf(\n    PropTypes.shape({\n      position: CatanTypes.VertexPosition.isRequired,\n      isCity: PropTypes.bool.isRequired,\n      colour: PropTypes.string.isRequired,\n      username: PropTypes.string.isRequired\n    })\n  ),\n  roads: PropTypes.arrayOf(\n    PropTypes.shape({\n      vertices: CatanTypes.RoadPosition.isRequired,\n      colour: PropTypes.string.isRequired,\n      username: PropTypes.string.isRequired\n    })\n  ),\n  availableBuilds: PropTypes.arrayOf(CatanTypes.VertexPosition),\n  availableUpgrades: PropTypes.arrayOf(CatanTypes.VertexPosition),\n  availableRoadSlots: PropTypes.arrayOf(CatanTypes.RoadPosition),\n  robber: CatanTypes.HexPosition.isRequired\n};\n\nBoardContainer.defaultProps = {\n  hexagons: null,\n  settlements: null,\n  roads: null,\n  availableBuilds: null,\n  availableUpgrades: null,\n  availableRoadSlots: null\n};\n"]},"metadata":{},"sourceType":"module"}