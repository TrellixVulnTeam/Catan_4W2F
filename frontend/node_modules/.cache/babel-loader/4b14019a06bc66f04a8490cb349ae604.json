{"ast":null,"code":"import _defineProperty from \"/home/agustina/Descargas/catan/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/agustina/Descargas/catan/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport axios from \"axios\";\nconst URL = process.env.REACT_APP_API;\nconst POLL_EVERY = 2000;\nconst API = axios.create({\n  baseURL: URL,\n  timeout: 10000,\n  headers: {\n    Authorization: {\n      toString() {\n        return \"Bearer \".concat(localStorage.token);\n      }\n\n    }\n  }\n});\nconst auth = {\n  login: (user, pass) => API.post(\"/users/login/\", {\n    user,\n    pass\n  }),\n  register: (user, pass) => API.post(\"/users/\", {\n    user,\n    pass\n  })\n};\nconst boards = {\n  all: () => API.get(\"/boards/\")\n};\nconst lobbies = {\n  all: () => API.get(\"/rooms/\"),\n  create: (name, board_id) => API.post(\"/rooms/\", {\n    name,\n    board_id\n  }),\n  join: id => API.put(\"/rooms/\".concat(id, \"/\")),\n  get: id => API.get(\"/rooms/\".concat(id, \"/\")),\n  start: id => API.patch(\"/rooms/\".concat(id, \"/\")),\n  cancel: id => API.delete(\"/rooms/\".concat(id, \"/\"))\n};\nconst games = {\n  all: () => API.get(\"/games/\"),\n  get: id => API.get(\"/games/\".concat(id, \"/\")),\n  board: id => API.get(\"/games/\".concat(id, \"/board/\")),\n  player: id => API.get(\"/games/\".concat(id, \"/player/\")),\n  actions: id => API.get(\"/games/\".concat(id, \"/player/actions/\")),\n  playAction: (id, type, payload) => API.post(\"/games/\".concat(id, \"/player/actions/\"), {\n    type,\n    payload\n  }),\n  transactions: id => API.get(\"/games/\".concat(id, \"/player/transactions/\"))\n}; // Decorator for temporarily memoizing apicalls\n\nfunction memoize(apicall) {\n  function memcall(...args) {\n    const key = JSON.stringify(args);\n    const now = Date.now();\n    if (!memcall.cache) memcall.cache = {};\n    if (key in memcall.cache && now < memcall.cache[key].time + POLL_EVERY) return memcall.cache[key].value;\n    const res = apicall(...args);\n    memcall.cache[key] = {\n      time: now,\n      value: res\n    };\n    return res;\n  }\n\n  return memcall;\n}\n\nconst endpoints = {\n  auth,\n  boards,\n  lobbies,\n  games\n}; // Memoize endpoints\n\nfor (const _ref of Object.entries(endpoints)) {\n  var _ref2 = _slicedToArray(_ref, 2);\n\n  const i = _ref2[0];\n  const group = _ref2[1];\n\n  for (const _ref3 of Object.entries(group)) {\n    var _ref4 = _slicedToArray(_ref3, 2);\n\n    const j = _ref4[0];\n    const apicall = _ref4[1];\n    endpoints[i][j] = memoize(apicall);\n  }\n}\n\nexport default _objectSpread({\n  POLL_EVERY\n}, endpoints);","map":{"version":3,"sources":["/home/agustina/Descargas/catan/src/Api.js"],"names":["axios","URL","process","env","REACT_APP_API","POLL_EVERY","API","create","baseURL","timeout","headers","Authorization","toString","localStorage","token","auth","login","user","pass","post","register","boards","all","get","lobbies","name","board_id","join","id","put","start","patch","cancel","delete","games","board","player","actions","playAction","type","payload","transactions","memoize","apicall","memcall","args","key","JSON","stringify","now","Date","cache","time","value","res","endpoints","Object","entries","i","group","j"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n\nconst URL = process.env.REACT_APP_API;\n\nconst POLL_EVERY = 2000;\n\nconst API = axios.create({\n  baseURL: URL,\n  timeout: 10000,\n  headers: {\n    Authorization: {\n      toString() {\n        return `Bearer ${localStorage.token}`;\n      }\n    }\n  }\n});\n\nconst auth = {\n  login: (user, pass) => API.post(\"/users/login/\", { user, pass }),\n  register: (user, pass) => API.post(\"/users/\", { user, pass })\n};\n\nconst boards = {\n  all: () => API.get(\"/boards/\")\n};\n\nconst lobbies = {\n  all: () => API.get(\"/rooms/\"),\n  create: (name, board_id) => API.post(\"/rooms/\", { name, board_id }),\n  join: id => API.put(`/rooms/${id}/`),\n  get: id => API.get(`/rooms/${id}/`),\n  start: id => API.patch(`/rooms/${id}/`),\n  cancel: id => API.delete(`/rooms/${id}/`)\n};\n\nconst games = {\n  all: () => API.get(\"/games/\"),\n  get: id => API.get(`/games/${id}/`),\n  board: id => API.get(`/games/${id}/board/`),\n  player: id => API.get(`/games/${id}/player/`),\n  actions: id => API.get(`/games/${id}/player/actions/`),\n  playAction: (id, type, payload) =>\n    API.post(`/games/${id}/player/actions/`, { type, payload }),\n  transactions: id => API.get(`/games/${id}/player/transactions/`)\n};\n\n// Decorator for temporarily memoizing apicalls\nfunction memoize(apicall) {\n  function memcall(...args) {\n    const key = JSON.stringify(args);\n    const now = Date.now();\n    if (!memcall.cache) memcall.cache = {};\n    if (key in memcall.cache && now < memcall.cache[key].time + POLL_EVERY)\n      return memcall.cache[key].value;\n    const res = apicall(...args);\n    memcall.cache[key] = { time: now, value: res };\n    return res;\n  }\n  return memcall;\n}\n\nconst endpoints = { auth, boards, lobbies, games };\n\n// Memoize endpoints\nfor (const [i, group] of Object.entries(endpoints))\n  for (const [j, apicall] of Object.entries(group))\n    endpoints[i][j] = memoize(apicall);\n\nexport default {\n  POLL_EVERY,\n  ...endpoints\n};\n"]},"metadata":{},"sourceType":"module"}