{"ast":null,"code":"import _slicedToArray from \"/home/agustina/Descargas/catan/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/agustina/Descargas/catan/src/components/GameStatus.jsx\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport _ from \"lodash\";\nimport GameContext, { SET_DEFAULT, PLAY_KNIGHT, PLAY_ROAD_BUILDING } from \"../GameContext\";\nimport api from \"../Api\";\nimport { ReactComponent as Dot } from \"@svgr/webpack?-svgo,+titleProp,+ref!../public/icons/circle-solid.svg\";\nexport default function GameStatus() {\n  const _useContext = useContext(GameContext),\n        phase = _useContext.phase,\n        gameId = _useContext.gameId,\n        roads = _useContext.roads,\n        gameDispatch = _useContext.gameDispatch,\n        showModal = _useContext.showModal;\n\n  const _useState = useState({\n    username: null,\n    colour: \"yellow\"\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        _useState2$ = _useState2[0],\n        username = _useState2$.username,\n        colour = _useState2$.colour,\n        setTurn = _useState2[1];\n\n  useEffect(() => {\n    const fetchTurn = async () => {\n      const res = await api.games.get(gameId);\n      const usernameTurn = res.data.current_turn.user;\n      const colourTurn = res.data.players.find(p => p.username === usernameTurn).colour;\n      setTurn({\n        username: usernameTurn,\n        colour: colourTurn\n      });\n    };\n\n    fetchTurn();\n    const interval = setInterval(() => fetchTurn(), api.POLL_EVERY);\n    return () => clearInterval(interval);\n  }, [gameId]);\n  const playerColours = {\n    red: \"#F44336\",\n    blue: \"#2196F3\",\n    yellow: \"#FFC107\",\n    white: \"#4CAF50\"\n  };\n  const statusClasses = \"bg-gray-400 p-3 text-gray-800 rounded-lg w-40 h-auto text-center\";\n  const cancelBtnClasses = \"bg-red-800 w-full text-red-300 rounded-lg py-2 mt-3 uppercase hover:bg-red-900 hover:text-red-400\";\n  const successBtnClasses = \"bg-green-800 w-full text-green-300 rounded-lg py-2 mt-2 uppercase hover:bg-green-900 hover:text-green-400\";\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: {\n      position: \"fixed\",\n      top: \"1rem\",\n      right: \"1rem\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"pb-3 flex flex-row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"self-center w-4 h-4 mr-5 inline-block\",\n    style: {\n      color: playerColours[colour]\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(Dot, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  })), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, username ? \"\".concat(_.capitalize(username), \"'s Turn\") : \"Loading Turn...\")), React.createElement(\"div\", {\n    className: statusClasses,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, _.startCase(phase), [PLAY_KNIGHT, PLAY_ROAD_BUILDING].includes(phase) && React.createElement(\"button\", {\n    className: cancelBtnClasses,\n    type: \"button\",\n    onClick: () => gameDispatch({\n      type: SET_DEFAULT\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, \"cancel\"), [PLAY_ROAD_BUILDING].includes(phase) && React.createElement(\"button\", {\n    className: successBtnClasses,\n    type: \"button\",\n    onClick: () => {\n      if (roads.length === 2) {\n        api.games.playAction(gameId, \"play_road_building_card\", roads);\n        gameDispatch({\n          type: SET_DEFAULT\n        });\n      } else showModal({\n        disabled: false,\n        title: \"Select two roads first\",\n        buttons: [{\n          text: \"Ok\"\n        }]\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, \"done\"))));\n}","map":{"version":3,"sources":["/home/agustina/Descargas/catan/src/components/GameStatus.jsx"],"names":["React","useContext","useEffect","useState","_","GameContext","SET_DEFAULT","PLAY_KNIGHT","PLAY_ROAD_BUILDING","api","GameStatus","phase","gameId","roads","gameDispatch","showModal","username","colour","setTurn","fetchTurn","res","games","get","usernameTurn","data","current_turn","user","colourTurn","players","find","p","interval","setInterval","POLL_EVERY","clearInterval","playerColours","red","blue","yellow","white","statusClasses","cancelBtnClasses","successBtnClasses","position","top","right","color","capitalize","startCase","includes","type","length","playAction","disabled","title","buttons","text"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport _ from \"lodash\";\n\nimport GameContext, {\n  SET_DEFAULT,\n  PLAY_KNIGHT,\n  PLAY_ROAD_BUILDING\n} from \"../GameContext\";\nimport api from \"../Api\";\nimport { ReactComponent as Dot } from \"../public/icons/circle-solid.svg\";\n\nexport default function GameStatus() {\n  const { phase, gameId, roads, gameDispatch, showModal } = useContext(\n    GameContext\n  );\n\n  const [{ username, colour }, setTurn] = useState({\n    username: null,\n    colour: \"yellow\"\n  });\n\n  useEffect(() => {\n    const fetchTurn = async () => {\n      const res = await api.games.get(gameId);\n      const usernameTurn = res.data.current_turn.user;\n      const colourTurn = res.data.players.find(p => p.username === usernameTurn)\n        .colour;\n\n      setTurn({\n        username: usernameTurn,\n        colour: colourTurn\n      });\n    };\n    fetchTurn();\n    const interval = setInterval(() => fetchTurn(), api.POLL_EVERY);\n    return () => clearInterval(interval);\n  }, [gameId]);\n\n  const playerColours = {\n    red: \"#F44336\",\n    blue: \"#2196F3\",\n    yellow: \"#FFC107\",\n    white: \"#4CAF50\"\n  };\n\n  const statusClasses =\n    \"bg-gray-400 p-3 text-gray-800 rounded-lg w-40 h-auto text-center\";\n\n  const cancelBtnClasses =\n    \"bg-red-800 w-full text-red-300 rounded-lg py-2 mt-3 uppercase hover:bg-red-900 hover:text-red-400\";\n\n  const successBtnClasses =\n    \"bg-green-800 w-full text-green-300 rounded-lg py-2 mt-2 uppercase hover:bg-green-900 hover:text-green-400\";\n\n  return (\n    <div>\n      {/* TODO: Find a better way to inform the player the current phase */}\n      <div style={{ position: \"fixed\", top: \"1rem\", right: \"1rem\" }}>\n        <div className=\"pb-3 flex flex-row\">\n          <div\n            className=\"self-center w-4 h-4 mr-5 inline-block\"\n            style={{ color: playerColours[colour] }}\n          >\n            <Dot />\n          </div>\n          <span>\n            {username ? `${_.capitalize(username)}'s Turn` : \"Loading Turn...\"}\n          </span>\n        </div>\n        <div className={statusClasses}>\n          {_.startCase(phase)}\n          {/* TODO: Find a better way to let the player cancel play_knight */}\n          {[PLAY_KNIGHT, PLAY_ROAD_BUILDING].includes(phase) && (\n            <button\n              className={cancelBtnClasses}\n              type=\"button\"\n              onClick={() => gameDispatch({ type: SET_DEFAULT })}\n            >\n              cancel\n            </button>\n          )}\n          {[PLAY_ROAD_BUILDING].includes(phase) && (\n            <button\n              className={successBtnClasses}\n              type=\"button\"\n              onClick={() => {\n                if (roads.length === 2) {\n                  api.games.playAction(\n                    gameId,\n                    \"play_road_building_card\",\n                    roads\n                  );\n                  gameDispatch({ type: SET_DEFAULT });\n                } else\n                  showModal({\n                    disabled: false,\n                    title: \"Select two roads first\",\n                    buttons: [{ text: \"Ok\" }]\n                  });\n              }}\n            >\n              done\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}