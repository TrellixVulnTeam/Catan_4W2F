{"ast":null,"code":"import _slicedToArray from \"/home/agustina/Descargas/catan/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/agustina/Descargas/catan/src/components/WinGame.jsx\";\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport api from \"../Api\";\nimport GameContext from \"../GameContext\";\nimport AuthContext from \"../AuthContext\";\n\nfunction WinGame() {\n  const _useContext = useContext(GameContext),\n        gameId = _useContext.gameId,\n        showModal = _useContext.showModal;\n\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        winner = _useState2[0],\n        setWinner = _useState2[1];\n\n  const _useContext2 = useContext(AuthContext),\n        auth = _useContext2.auth;\n\n  useEffect(() => {\n    const fetchWinner = async () => {\n      const res = await api.games.get(gameId);\n      const lastWinner = res.data.winner;\n      setWinner(lastWinner);\n    };\n\n    fetchWinner();\n    const interval = setInterval(() => fetchWinner(), api.POLL_EVERY);\n    return () => clearInterval(interval);\n  }, [gameId]);\n  const history = useHistory();\n  useEffect(() => {\n    const won = winner === auth.user;\n\n    if (winner) {\n      showModal({\n        disabled: false,\n        title: won ? \"Victory\" : \"Defeat\",\n        body: won ? \"You have won!\" : \"You've been defeated by \".concat(winner),\n        buttons: [{\n          text: \"Accept\",\n          callback: () => history.push(\"/lobby\")\n        }],\n        showCloseButton: false\n      });\n    }\n  }, [winner, history, auth.user, showModal]);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  });\n}\n\nexport default WinGame;","map":{"version":3,"sources":["/home/agustina/Descargas/catan/src/components/WinGame.jsx"],"names":["React","useState","useEffect","useContext","useHistory","api","GameContext","AuthContext","WinGame","gameId","showModal","winner","setWinner","auth","fetchWinner","res","games","get","lastWinner","data","interval","setInterval","POLL_EVERY","clearInterval","history","won","user","disabled","title","body","buttons","text","callback","push","showCloseButton"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,OAAOC,GAAP,MAAgB,QAAhB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;;AAEA,SAASC,OAAT,GAAmB;AAAA,sBACaL,UAAU,CAACG,WAAD,CADvB;AAAA,QACTG,MADS,eACTA,MADS;AAAA,QACDC,SADC,eACDA,SADC;;AAAA,oBAEWT,QAAQ,CAAC,IAAD,CAFnB;AAAA;AAAA,QAEVU,MAFU;AAAA,QAEFC,SAFE;;AAAA,uBAGAT,UAAU,CAACI,WAAD,CAHV;AAAA,QAGTM,IAHS,gBAGTA,IAHS;;AAKjBX,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMY,WAAW,GAAG,YAAY;AAC9B,YAAMC,GAAG,GAAG,MAAMV,GAAG,CAACW,KAAJ,CAAUC,GAAV,CAAcR,MAAd,CAAlB;AACA,YAAMS,UAAU,GAAGH,GAAG,CAACI,IAAJ,CAASR,MAA5B;AACAC,MAAAA,SAAS,CAACM,UAAD,CAAT;AACD,KAJD;;AAKAJ,IAAAA,WAAW;AACX,UAAMM,QAAQ,GAAGC,WAAW,CAAC,MAAMP,WAAW,EAAlB,EAAsBT,GAAG,CAACiB,UAA1B,CAA5B;AACA,WAAO,MAAMC,aAAa,CAACH,QAAD,CAA1B;AACD,GATQ,EASN,CAACX,MAAD,CATM,CAAT;AAWA,QAAMe,OAAO,GAAGpB,UAAU,EAA1B;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMuB,GAAG,GAAGd,MAAM,KAAKE,IAAI,CAACa,IAA5B;;AACA,QAAIf,MAAJ,EAAY;AACVD,MAAAA,SAAS,CAAC;AACRiB,QAAAA,QAAQ,EAAE,KADF;AAERC,QAAAA,KAAK,EAAEH,GAAG,GAAG,SAAH,GAAe,QAFjB;AAGRI,QAAAA,IAAI,EAAEJ,GAAG,GAAG,eAAH,qCAAgDd,MAAhD,CAHD;AAIRmB,QAAAA,OAAO,EAAE,CACP;AACEC,UAAAA,IAAI,EAAE,QADR;AAEEC,UAAAA,QAAQ,EAAE,MAAMR,OAAO,CAACS,IAAR;AAFlB,SADO,CAJD;AAURC,QAAAA,eAAe,EAAE;AAVT,OAAD,CAAT;AAYD;AACF,GAhBQ,EAgBN,CAACvB,MAAD,EAASa,OAAT,EAAkBX,IAAI,CAACa,IAAvB,EAA6BhB,SAA7B,CAhBM,CAAT;AAkBA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD;;AAED,eAAeF,OAAf","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport api from \"../Api\";\nimport GameContext from \"../GameContext\";\nimport AuthContext from \"../AuthContext\";\n\nfunction WinGame() {\n  const { gameId, showModal } = useContext(GameContext);\n  const [winner, setWinner] = useState(null);\n  const { auth } = useContext(AuthContext);\n\n  useEffect(() => {\n    const fetchWinner = async () => {\n      const res = await api.games.get(gameId);\n      const lastWinner = res.data.winner;\n      setWinner(lastWinner);\n    };\n    fetchWinner();\n    const interval = setInterval(() => fetchWinner(), api.POLL_EVERY);\n    return () => clearInterval(interval);\n  }, [gameId]);\n\n  const history = useHistory();\n\n  useEffect(() => {\n    const won = winner === auth.user;\n    if (winner) {\n      showModal({\n        disabled: false,\n        title: won ? \"Victory\" : \"Defeat\",\n        body: won ? \"You have won!\" : `You've been defeated by ${winner}`,\n        buttons: [\n          {\n            text: \"Accept\",\n            callback: () => history.push(`/lobby`)\n          }\n        ],\n        showCloseButton: false\n      });\n    }\n  }, [winner, history, auth.user, showModal]);\n\n  return <div />;\n}\n\nexport default WinGame;\n"]},"metadata":{},"sourceType":"module"}